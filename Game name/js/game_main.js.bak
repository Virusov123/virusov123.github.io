var pole = []; var pole1 = []; var inv = []; var items = []; var mobs = [];
var opinv = 0; var debugonn = 0; var x_inv = 0; var y_inv = 0;
var opcontmenu = 0; var cont = 0;
var maxwidth = 31; var maxheight = 31; var minsz = 7; var maxsz = 3; var lvl = 1;
var plposx; var plposy; var lev = 0;
var nazh = 0;
var tryap = 0;
var perreg = 0;
var kills = 0;
var lightmax = 200; var light = lightmax;
var hpmax = 100; var hp = hpmax;
var fdmax = 800; var fd = fdmax;
var watmax = 500; var wat = watmax;
var bgbtlstmax = watmax*2; var bgbtlst = bgbtlstmax;
//wall_floor
	var stena = new Image();
	stena.src = "../img/pol_steny/stena1.jpg";
	var stenagr = new Image();
	stenagr.src = "../img/pol_steny/stena3.jpg";
	var pol = new Image();
	pol.src = "../img/pol_steny/pol3.jpg";
	var polgr = new Image();
	polgr.src = "../img/pol_steny/pol1.jpg";
	var stenat = new Image();
	stenat.src = "../img/pol_steny/stenat.jpg";
//
//pers
	var perspfg = new Image();
	perspfg.src = "../img/pers/persp.png";
	var perslfg = new Image();
	perslfg.src = "../img/pers/persl.png";
	var perspfn = new Image();
	perspfn.src = "../img/pers/perspfn.png";
	var perslfn = new Image();
	perslfn.src = "../img/pers/perslfn.png";
//
//add_floor
	var kvsh = new Image();
	kvsh.src = "../img/pol_steny/kuvshin.png";
	var lzh = new Image();
	lzh.src = "../img/pol_steny/luzha.png";
	var lvn = new Image();
	lvn.src = "../img/pol_steny/lestvn.png";
//
//items
	var bread = new Image;
	bread.src = "../img/predm/bread.png";
	var torch = new Image;
	torch.src = "../img/predm/torch.png";
	var btl = new Image;
	btl.src = "../img/predm/littlebottle.png";
	var trp = new Image;
	trp.src = "../img/predm/tryapka.png";
	var bgbtl = new Image;
	bgbtl.src = "../img/predm/big_bottle.png";
//
//mobs
	var mob1l = new Image;
	mob1l.src = "../img/mobs/mob1l.png";
	var mob1r = new Image;
	mob1r.src = "../img/mobs/mob1r.png";
for (invst = 0; invst < 7; invst++)
{
	inv[invst] = [0, 0, 0, 0, 0, 0, 0];
}
inv[6][6] = 10;
var kolkl = 0;
function GRI(max)//Функция рандома 
{
  return Math.floor(Math.random() * max);
}
function debugoff()//Выключение debug
{
	var canvas = document.getElementById("poleprov");
	canvas.style.display = "none";
	debugonn = 0;
}
function debug()//debug режим (миникарта и координаты)
{
	debugonn = 1;
	var canvas = document.getElementById("poleprov");
	canvas.style.display = "block";
	var crd = document.getElementById("coords");
	crd.style.display = "block";
	var ctx = canvas.getContext('2d');
	ctx.clearRect(0, 0, 3100, 3100);
	for (i = 0; i < maxwidth; i++)
	{

		for (j = 0; j < maxheight; j++)
		{
			switch(pole[i][j])
			{
				case -1:
				{
					ctx.drawImage(stenat,i*100, j*100);
					break;
				}
				case -2:
				{
					ctx.drawImage(stena,i*100, j*100);
					break;
				}
				case 1:
				{
					ctx.drawImage(stena,i*100, j*100);
					break;
				}
				case 0:
				{
					ctx.drawImage(pol,i*100, j*100);
					break;
				}
				case 2:
				{
					ctx.drawImage(polgr,i*100, j*100);
					break;
				}
				case -5:
				{
					ctx.drawImage(stenagr,i*100, j*100);
					break;
				}
			}
			switch(pole1[i][j])
			{
				case 1:
				{
					ctx.drawImage(kvsh,i*100, j*100, 100, 100);
					break;
				}
				case 2:
				{
					ctx.drawImage(lzh,i*100, j*100, 100, 100);
					break;
				}
				case 4:
				{
					ctx.drawImage(lvn,i*100, j*100, 100, 100);
					break;
				}
			}
			switch(mobs[i][j][0])
			{
				case 1:
				{
					ctx.drawImage(mob1l,i*100, j*100, 100, 100);
					break;
				}
			}
		}
	}
}
function next_level()//Переход на следующий уровень
{
	lvl++;
	maxwidth+=6;
	maxheight+=6;
	pole = [];
	pole1 = [];
	items = [];
	mobs = [];
	start();
}
function genlest()//генерация лестниц
{
	let klvrest = 0;
	let nn = 0;
	while(!nn)
	{
		let grx = GRI(maxwidth-1);
		let gry = GRI(maxheight-1);
		let rstx = Math.abs(grx - plposx);
		let rsty = Math.abs(gry - plposy);
		if ((pole[grx][gry] == 0 || pole[grx][gry] == 2) && pole1[grx][gry] != 1 && rstx > maxwidth/5 && rsty > maxheight/5)
		{
			pole1[grx][gry] = 4;
			xvyh = grx;
			yvyh = gry;
			nn++;
		}
		klvrest++;
		if (klvrest > 1000)
		{
			generate();
			break;
		}
	}
}
function gengr()//генерация заросшего окружения
{
	for (let i = 0; i < Math.round(maxwidth * maxheight / 4); i++)
	{
		let grx = GRI(maxwidth-1);
		let gry = GRI(maxheight-1);
		if (pole[grx][gry] == 0)
		{
			pole[grx][gry] = 2;
		}
	}
	for (let i = 0; i < Math.round(maxwidth * maxheight / 4); i++)
	{
		let grx = GRI(maxwidth-1);
		let gry = GRI(maxheight-1);
		if (pole[grx][gry] == 1 || pole[grx][gry] == -2)
		{
			pole[grx][gry] = -5;
		}
	}
}
var klvkvsh = 0;
function genkuvsh()//генерация кувшинов
{
	klvkvsh = 0;
	kuvshin = Math.round(kolkl / (100 * Math.sqrt(lvl)));
	let mxkk = GRI(kuvshin) + Math.round(5/Math.sqrt(lvl));
	klvrest = 0;
	while(klvkvsh < mxkk)
	{
		let grx = GRI(maxwidth-1);
		let gry = GRI(maxheight-1);
		if (pole[grx][gry] == 0 || pole[grx][gry] == 2)
		{
			pole1[grx][gry] = 1;
			klvkvsh++;
		}
		if (klvrest > 10000)
		{
			break;
		}
		klvrest++;
	}
}
var klvmb = 0;
function genmob()//генерация мобов
{
	klvmb = 0;
	mob = Math.round((kolkl / 100) * Math.sqrt(lvl));
	let mxkk = GRI(mob+1) + Math.round(Math.sqrt(lvl));
	klvrest = 0;
	while(klvmb < mxkk)
	{
		let grx = GRI(maxwidth-1);
		let gry = GRI(maxheight-1);
		if ((pole[grx][gry] == 0 || pole[grx][gry] == 2) && pole1[grx][gry] == 0 && mobs[grx][gry][0] == 0)
		{
			mobs[grx][gry][0] = 1;
			mobs[grx][gry][2] = 20;
			mobs[grx][gry][3] = 0;
			klvmb++;
		}
		if (klvrest > 10000)
		{
			break;
			console.log("errorgenmob");
		}
		klvrest++;
	}
}
function genluzh()//генерация луж
{
	let klvlzh = 0;
	let lz = GRI(3);
	klvrest = 0;
	while(klvlzh < lz)
	{
		let grx = GRI(maxwidth-1);
		let gry = GRI(maxheight-1);
		if (pole[grx][gry] == 0 || pole[grx][gry] == 2)
		{
			pole1[grx][gry] = 2;
			klvlzh++;
		}
		if (klvrest > 10000)
		{
			break;
		}
		klvrest++;
	}
}
function genrand(x, y)//генерация полости
{
	pole[x][y] = 0;
	kolkl++;
	let t1 = GRI(2);
	let t2 = GRI(2);
	let t3 = GRI(2);
	let t4 = GRI(2);
	if (!t1 && pole[x+1][y] != 0 && pole[x+1][y] != 2 && pole[x+1][y] != -2)
		genrand(x+1, y);
	if (!t2 && pole[x-1][y] != 0 && pole[x+1][y] != 2 && pole[x-1][y] != -2)
		genrand(x-1, y);
	if (!t3 && pole[x][y+1] != 0 && pole[x+1][y] != 2 && pole[x][y+1] != -2)
		genrand(x, y+1);
	if (!t4 && pole[x][y-1] != 0 && pole[x+1][y] != 2 && pole[x][y-1] != -2)
		genrand(x, y-1);
}

function start()//стартовая функция
{
	for (startlaunch = 0; startlaunch < maxwidth; startlaunch++)
	{
		pole[startlaunch] = [];
		pole1[startlaunch] = [];
		items[startlaunch] = [];
		mobs[startlaunch] = [];
		for (startlaunch1 = 0; startlaunch1 < maxheight; startlaunch1++)
			mobs[startlaunch][startlaunch1] = [0,0];
	}
	let minip = document.getElementById('poleprov');
	minip.width = maxwidth*100;
	minip.height = maxheight*100;
	plposx = Math.round(maxwidth/2);
	plposy = Math.round(maxheight/2);
	let klvrest = 0;
	kolkl = 0;
	while (kolkl < (Math.round(maxwidth * maxheight / minsz)) || kolkl > (Math.round(maxwidth * maxheight / maxsz)))
	{
		generate();
		klvrest++;
		if (klvrest > 500)
		{
			generate();
			break;
		}
	}
	if (lvl == 1)
	{
		for (i = 0; i < 5; i++)
		{
			it = GRI(2)+1;
			geteltoinv(it);
		}
	}
	draw();
	let ldf = document.getElementById('loadf');
	let ld = document.getElementById('load');
	ldf.style.display = 'none';
	ld.style.display = 'none';
}

function generate()//Основрая генерация
{
	kolkl = 0;
	for (launch_generate_x = 0; launch_generate_x < maxwidth; launch_generate_x++)
	{
		for (launch_generate_y = 0; launch_generate_y < maxheight; launch_generate_y++)
		{
			if (launch_generate_y <=1 || launch_generate_x <= 1 || launch_generate_y >= maxwidth-2 || launch_generate_x >= maxheight-2)
				pole[launch_generate_x][launch_generate_y] = -1;
			else
				if (launch_generate_y ==2 || launch_generate_x == 2 || launch_generate_y == maxwidth-3 || launch_generate_x == maxheight-3)
					pole[launch_generate_x][launch_generate_y] = -2;
				else
					pole[launch_generate_x][launch_generate_y] = 1;
		}
	}
	for (startlaunch = 0; startlaunch < maxwidth; startlaunch++)
	{
		for (stl = 0; stl < maxheight; stl++)
		{
			pole1[startlaunch][stl] = 0;
			items[startlaunch][stl] = 0;
			mobs[startlaunch][stl][0] = 0;
		}
	}
	let klvrest;
	while (kolkl < (Math.round(maxwidth * maxheight / 6)))
	{
		if (klvrest > 100)
		{
			break;
		}
		if (pole[plposx-1][plposy] != 0 || pole[plposx+1][plposy] != 0 || pole[plposx][plposy-1] != 0 || pole[plposx][plposy+1] != 0)
			genrand(plposx, plposy);
		else
		{
			break;
		}
		klvrest++;
	}
	//вызов генераторов доп вещей
	gengr();
	genkuvsh();
	genluzh();
	genlest();
	genmob();
	//вызов debug режима
	if (debugonn)
		debug();
}
function draw()//прорисовка хода
{
	var canvas = document.getElementById("pole");
	var ctx = canvas.getContext('2d');
	ctx.clearRect(0, 0, 7000, 7000);
	if (!opinv)//Основное поле
	{
		for (let i = plposx-3; i < plposx+4; i++)
			{
				for (let j = plposy-3; j < plposy+4; j++)
				{
					switch(pole[i][j])
					{
						case -1:
						{
							ctx.drawImage(stenat,(i-plposx+3)*1000, (j-plposy+3)*1000, 1000, 1000);
							break;
						}
						case -2:
						{
							ctx.drawImage(stena,(i-plposx+3)*1000, (j-plposy+3)*1000, 1000, 1000);
							break;
						}
						case 1:
						{
							ctx.drawImage(stena,(i-plposx+3)*1000, (j-plposy+3)*1000, 1000, 1000);
							break;
						}
						case 0:
						{
							ctx.drawImage(pol,(i-plposx+3)*1000, (j-plposy+3)*1000, 1000, 1000);
							break;
						}
						case 2:
						{
							ctx.drawImage(polgr,(i-plposx+3)*1000, (j-plposy+3)*1000, 1000, 1000);
							break;
						}
						case -5:
						{
							ctx.drawImage(stenagr,(i-plposx+3)*1000, (j-plposy+3)*1000, 1000, 1000);
							break;
						}
					}
					switch (pole1[i][j])
					{
						case 1:
						{
							ctx.drawImage(kvsh,(i-plposx+3)*1000+300, (j-plposy+3)*1000+300, 500, 500);
							break;
						}
						case 2:
						{
							ctx.drawImage(lzh,(i-plposx+3)*1000, (j-plposy+3)*1000, 1000, 1000);
							break;
						}
						case 4:
						{
							ctx.drawImage(lvn,(i-plposx+3)*1000, (j-plposy+3)*1000, 1000, 1000);
							break;
						}
					}
					switch (items[i][j])
					{
						case 1:
						{
							ctx.drawImage(bread,(i-plposx+3)*1000+300, (j-plposy+3)*1000+300, 500, 500);
							break;
						}
						case 2:
						{
							ctx.drawImage(torch,(i-plposx+3)*1000, (j-plposy+3)*1000, 1000, 1000);
							break;
						}
						case 3:
						{
							ctx.drawImage(btl,(i-plposx+3)*1000, (j-plposy+3)*1000, 1000, 1000);
							break;
						}
						case 4:
						{
							ctx.drawImage(trp,(i-plposx+3)*1000, (j-plposy+3)*1000, 1000, 1000);
							break;
						}
					}
					switch(mobs[i][j][0])
					{
						case 1:
						{
							if (mobs[i][j][3])
								ctx.drawImage(mob1r,(i-plposx+3)*1000, (j-plposy+3)*1000, 1000, 1000);
							else
								ctx.drawImage(mob1l,(i-plposx+3)*1000, (j-plposy+3)*1000, 1000, 1000);
							break;
						}
					}
				}
			}
		//
		//Прорисовка игрока и света
		if (light > 0)
		{
			ctx.fillStyle = "rgba(255, 221, 39, 0.33)";
			ctx.fillRect(0,0,7000,7000);
			if (tryap == 0)
			{
				var gr = ctx.createRadialGradient(3500, 3500, 800, 3500, 3500, 3100);
			}
			else
			{
				var gr = ctx.createRadialGradient(3500, 3500, 1300, 3500, 3500, 4100);
			}	
			gr.addColorStop(0,"transparent");
			gr.addColorStop(1,"black");
			ctx.fillStyle=gr;
			ctx.fillRect(0,0,7000,7000);
			if (!lev)
			{
				ctx.drawImage(perspfg, 3000, 3000, 1000, 1000);
			}
			else
			{
				ctx.drawImage(perslfg, 3000, 3000, 1000, 1000);
			}
		}
		else
		{
			
			ctx.fillStyle = "rgba(0, 0, 0, 0.3)";
			ctx.fillRect(0,0,7000,7000);
			var gr = ctx.createRadialGradient(3500, 3500, 100, 3500, 3500, 1500);
			gr.addColorStop(0,"transparent");
			gr.addColorStop(1,"black");
			ctx.fillStyle=gr;
			ctx.fillRect(0,0,7000,7000);
			if (!lev)
			{
				ctx.drawImage(perspfn, 3000, 3000, 1000, 1000);
			}
			else
			{
				ctx.drawImage(perslfn, 3000, 3000, 1000, 1000);
			}
		}
	}
	//
	else//Открытый инвентарь
	{
		ctx.lineWidth = 40;
		ctx.strokeStyle = "slategray";
		for (let i = 0; i < 7; i++)
		{
			for (let j = 0; j < 7; j++)
			{
				switch(inv[i][j])
				{
					case 0:
					{
						ctx.strokeRect(i*1000, j*1000, 1000, 1000);
						break;
					}
					case 1:
					{
						ctx.strokeRect(i*1000, j*1000, 1000, 1000);
						ctx.drawImage(bread,i*1000+40, j*1000+40, 920, 920);
						break;
					}
					case 2:
					{
						ctx.strokeRect(i*1000, j*1000, 1000, 1000);
						ctx.drawImage(torch,i*1000+40, j*1000+40, 920, 920);
						break;
					}
					case 3:
					{
						ctx.strokeRect(i*1000, j*1000, 1000, 1000);
						ctx.drawImage(btl,i*1000+40, j*1000+40, 920, 920);
						break;
					}
					case 4:
					{
						ctx.strokeRect(i*1000, j*1000, 1000, 1000);
						ctx.drawImage(trp,i*1000+40, j*1000+40, 920, 920);
						break;
					}
					case 10:
					{
						bigbottle(i, j);
						ctx.strokeRect(i*1000, j*1000, 1000, 1000);
						break;
					}
				}
			}
		}
		ctx.strokeStyle = "white";
		ctx.strokeRect(x_inv*1000, y_inv*1000, 1000, 1000);
		if (opcontmenu)//Контекстное меню
		{
			let x_inv1 = x_inv - 3;
			let x_inv11 = Math.abs(x_inv - 3);
			if (!x_inv11)
				x_inv11 = 1;
			let xncont = 1500 + (x_inv1/x_inv11)*1000;
			let yvcont;
			if (y_inv < 4)
			{
				yvcont = y_inv*1000+1000;
				ctx.fillStyle = "rgba(0, 0, 0, 0.7)";
				ctx.fillRect(xncont, yvcont, 4000, 1500);
			}
			else
			{
				yvcont = y_inv*1000-1500;
				ctx.fillStyle = "rgba(0, 0, 0, 0.7)";
				ctx.fillRect(xncont, yvcont, 4000, 1500);
			}
			ctx.fillStyle = "rgba(127, 127, 127, 0.7)";
			switch (inv[x_inv][y_inv])
			{
				case 1://breadcont
				{
					ctx.fillRect(xncont+500, yvcont+500, 1500, 500);
					ctx.fillRect(xncont+2100, yvcont+500, 1500, 500);
					ctx.fillStyle = "rgba(255, 255, 255, 0.7)";
					ctx.font = "300px 'Didact Gothic', sans-serif";
					ctx.textAlign = "center";
					ctx.fillText("З'есці", xncont+1250, yvcont+850);
					ctx.fillText("Адмена", xncont+2850, yvcont+850);
					ctx.strokeStyle = "slategray";
					ctx.strokeRect(xncont+500, yvcont+500, 1500, 500);
					ctx.strokeRect(xncont+2100, yvcont+500, 1500, 500);
					ctx.strokeStyle = "white";
					if (!cont)
						ctx.strokeRect(xncont+500, yvcont+500, 1500, 500);
					else
						ctx.strokeRect(xncont+2100, yvcont+500, 1500, 500);
					break;
				}
				case 2://torchcont
				{
					ctx.fillRect(xncont+500, yvcont+500, 1500, 500);
					ctx.fillRect(xncont+2100, yvcont+500, 1500, 500);
					ctx.fillStyle = "rgba(255, 255, 255, 0.7)";
					ctx.font = "300px 'Didact Gothic', sans-serif";
					ctx.textAlign = "center";
					ctx.fillText("Запаліць", xncont+1250, yvcont+850);
					ctx.fillText("Адмена", xncont+2850, yvcont+850);
					ctx.strokeStyle = "slategray";
					ctx.strokeRect(xncont+500, yvcont+500, 1500, 500);
					ctx.strokeRect(xncont+2100, yvcont+500, 1500, 500);
					ctx.strokeStyle = "white";
					if (!cont)
						ctx.strokeRect(xncont+500, yvcont+500, 1500, 500);
					else
						ctx.strokeRect(xncont+2100, yvcont+500, 1500, 500);
					break;
				}
				case 3://littlebottlecont
				{
					ctx.fillRect(xncont+100, yvcont+500, 1000, 500);
					ctx.fillRect(xncont+1200, yvcont+500, 1500, 500);
					ctx.fillRect(xncont+2800, yvcont+500, 1000, 500);
					ctx.fillStyle = "rgba(255, 255, 255, 0.7)";
					ctx.font = "280px 'Didact Gothic', sans-serif";
					ctx.textAlign = "center";
					ctx.fillText("Выпіць", xncont+600, yvcont+850);
					ctx.fillText("Пераліць", xncont+1950, yvcont+850);
					ctx.fillText("Адмена", xncont+3300, yvcont+850);
					ctx.strokeStyle = "slategray";
					ctx.strokeRect(xncont+100, yvcont+500, 1000, 500);
					ctx.strokeRect(xncont+1200, yvcont+500, 1500, 500);
					ctx.strokeRect(xncont+2800, yvcont+500, 1000, 500);
					ctx.strokeStyle = "white";
					if (cont == 0)
						ctx.strokeRect(xncont+100, yvcont+500, 1000, 500);
					else
						if (cont == 1)
							ctx.strokeRect(xncont+1200, yvcont+500, 1500, 500);
						else
							ctx.strokeRect(xncont+2800, yvcont+500, 1000, 500);
					break;
				}
				case 4://tryapcont
				{
					ctx.fillRect(xncont+500, yvcont+500, 1500, 500);
					ctx.fillRect(xncont+2100, yvcont+500, 1500, 500);
					ctx.fillStyle = "rgba(255, 255, 255, 0.7)";
					ctx.font = "220px 'Didact Gothic', sans-serif";
					ctx.textAlign = "center";
					ctx.fillText("Выкарыстаць", xncont+1250, yvcont+850);
					ctx.font = "300px 'Didact Gothic', sans-serif";
					ctx.fillText("Адмена", xncont+2850, yvcont+850);
					ctx.strokeStyle = "slategray";
					ctx.strokeRect(xncont+500, yvcont+500, 1500, 500);
					ctx.strokeRect(xncont+2100, yvcont+500, 1500, 500);
					ctx.strokeStyle = "white";
					if (!cont)
						ctx.strokeRect(xncont+500, yvcont+500, 1500, 500);
					else
						ctx.strokeRect(xncont+2100, yvcont+500, 1500, 500);
					break;
				}
				case 10://bigbottlecont
				{
					ctx.fillRect(xncont+500, yvcont+500, 1500, 500);
					ctx.fillRect(xncont+2100, yvcont+500, 1500, 500);
					ctx.fillStyle = "rgba(255, 255, 255, 0.7)";
					ctx.font = "300px 'Didact Gothic', sans-serif";
					ctx.textAlign = "center";
					ctx.fillText("Выпіць", xncont+1250, yvcont+850);
					ctx.fillText("Адмена", xncont+2850, yvcont+850);
					ctx.strokeStyle = "slategray";
					ctx.strokeRect(xncont+500, yvcont+500, 1500, 500);
					ctx.strokeRect(xncont+2100, yvcont+500, 1500, 500);
					ctx.strokeStyle = "white";
					if (!cont)
						ctx.strokeRect(xncont+500, yvcont+500, 1500, 500);
					else
						ctx.strokeRect(xncont+2100, yvcont+500, 1500, 500);
					break;
				}
					
			}
		}
		invinf();
	}
	statout();
}
//Вывод стат
			function statout()
			{
				//Статы
				if (tryap)
				{
					document.getElementById("bns").style.display = "block";
					document.getElementById("bns").innerHTML = "Факел свеціць ярчэй.";
				}
				else
				{
					document.getElementById("bns").style.display = "none";
				}
				document.getElementById("coords").innerHTML = "x: " + plposx + "y: " + plposy;
				document.getElementById("lv").innerHTML = "Паверх: -" + lvl;
				document.getElementById("kl").innerHTML = "Забіта монстраў: " + kills;
				if (hp > 0)
				{
					document.getElementById("hp").innerHTML = "<canvas class = 'hp' id = 'hpbar' width = '1000' height = '500'></canvas>HP :"+ hp + "/" + hpmax + ";";
					hpload();
				}
				else
				{
					window.location.href = '../html/deathhp.html';
				}
				if (fd > 0)
				{
					document.getElementById("fd").innerHTML = "<canvas class = 'fd' id = 'fdbar' width = '1000' height = '500'></canvas>Ежа : " + Math.round(fd/fdmax*100) + "%;";
					fdload();
				}
				else
				{
					document.getElementById("fd").innerHTML = "<canvas class = 'fd' id = 'fdbar' width = '1000' height = '500'></canvas>Ежа : 0%;";
					fdload();
				}
				if (wat > 0)
				{
					document.getElementById("wat").innerHTML = "<canvas class = 'wt' id = 'wtbar' width = '1000' height = '500'></canvas>Вада : " + Math.round(wat/watmax*100) + "%;";
					wtload();
				}
				else
				{
					document.getElementById("wat").innerHTML = "<canvas class = 'wt' id = 'wtbar' width = '1000' height = '500'></canvas>Вада : 0%;";
					wtload();
				}
				if (light > 0)
				{
					document.getElementById("lt").innerHTML = "<canvas class = 'lt' id = 'ltbar' width = '800' height = '500'></canvas>Святло : " + Math.round(light/lightmax*100) + "%;";
					ltload();
				}
				else
				{
					if (light > -5)
					{
						document.getElementById("lt").innerHTML = "<canvas class = 'lt' id = 'ltbar' width = '800' height = '500'></canvas>light : 0;";
						ltload();
					}
					else
					{
						window.location.href = '../html/deathlight.html';
					}
				}
			}
//Управление
						//Вверх
						function up()
						{
							if (opinv)
							{
								if (y_inv > 0)
									y_inv--;
								return 0;	
							}
							if (mobs[plposx][plposy-1][0] == 1)
							{
								mobs[plposx][plposy-1][2] -= 10;
								if (mobs[plposx][plposy-1][2] <=0)
								{
									mobs[plposx][plposy-1][0] = 0;
									kills++;
								}
								else
								{
									mobs[plposx][plposy][0] = 1;
									mobs[plposx][plposy][1] = 1;
									mobs[plposx][plposy][2] = mobs[plposx][plposy-1][2];
									mobs[plposx][plposy-1][0] = 0;
									mobs[plposx][plposy-1][2] = 0;
								}
							}
							if (pole[plposx][plposy-1] != 1 && pole[plposx][plposy-1] != -2 && pole[plposx][plposy-1] != -5)
							{
								plposy--;
								next_hod();
							}
							return 0;
						}
						//Вниз
						function down()
						{
							if (opinv)
							{
								if (y_inv < 6)
									y_inv++;
								return 0;	
							}
							if (mobs[plposx][plposy+1][0] == 1)
							{
								mobs[plposx][plposy+1][2] -= 10;
								if (mobs[plposx][plposy+1][2] <=0)
								{
									mobs[plposx][plposy+1][0] = 0;
									kills++;
								}
								else
								{
									mobs[plposx][plposy][0] = 1;
									mobs[plposx][plposy][1] = 1;
									mobs[plposx][plposy][2] = mobs[plposx][plposy+1][2];
									mobs[plposx][plposy+1][0] = 0;
									mobs[plposx][plposy+1][2] = 0;
								}
							}
							if (pole[plposx][plposy+1] != 1 && pole[plposx][plposy+1] > -1)
							{
								plposy++;
								next_hod();
							}
							return 0;
						}
						//Лево
						function left()
						{
							if (opcontmenu)
							{
								if (inv[x_inv][y_inv] != 3)
									if (cont == 1)
										cont = 0;
									else
										cont = 1;
								else
									if (cont > 0)
										cont--;
									else
										cont = 2;
								return 0;
							}
							if (opinv)
							{
								if (x_inv > 0)
									x_inv--;
								return 0;
							}
							if (mobs[plposx-1][plposy][0] == 1)
							{
								mobs[plposx-1][plposy][2] -= 10;
								if (mobs[plposx-1][plposy][2] <=0)
								{
									mobs[plposx-1][plposy][0] = 0;
									kills++;
								}
								else
								{
									mobs[plposx][plposy][0] = 1;
									mobs[plposx][plposy][1] = 1;
									mobs[plposx][plposy][2] = mobs[plposx-1][plposy][2];
									mobs[plposx-1][plposy][0] = 0;
									mobs[plposx-1][plposy][2] = 0;
								}
							}
							if (pole[plposx-1][plposy] != 1 && pole[plposx-1][plposy] > -1)
							{
								plposx--;
								next_hod();
							}
							lev = 1;
							return 0;
						}
						//Право
						function right()
						{
							if (opcontmenu)
							{
								if (inv[x_inv][y_inv] != 3)
									if (cont == 0)
										cont = 1;
									else
										cont = 0;
								else
									if (cont < 2)
										cont++;
									else
										cont = 0;
								return 0;
							}
							if (opinv)
							{
								if (x_inv < 6)
									x_inv++;
								return 0;	
							}
							if (mobs[plposx+1][plposy][0] == 1)
							{
								mobs[plposx+1][plposy][2] -= 10;
								if (mobs[plposx+1][plposy][2] <=0)
								{
									mobs[plposx+1][plposy][0] = 0;
									kills++;
								}
								else
								{
									mobs[plposx][plposy][0] = 1;
									mobs[plposx][plposy][1] = 1;
									mobs[plposx][plposy][2] = mobs[plposx+1][plposy][2];
									mobs[plposx+1][plposy][0] = 0;
									mobs[plposx+1][plposy][2] = 0;
								}
							}
							if (pole[plposx+1][plposy] != 1 && pole[plposx+1][plposy] > -1)
							{
								plposx++;
								next_hod();
							}
							lev = 0;
							return 0;
						}
						//Использование
						function use()
						{
							if (opcontmenu)
							{
								if (!cont)
								{
									invchs();
									cont = 0;
								}
								else
									if (inv[x_inv][y_inv] != 3 || cont == 2)
									{
										opcontmenu = 0;
										cont = 0;
										return 0;
									}
									else
									{
										bgbtlst += 350;
										if (bgbtlst > bgbtlstmax)
											bgbtlst = bgbtlstmax;
										inv[x_inv][y_inv] = 0;
										srtinv();
										srtinv();
										cont = 0;
									}
								opcontmenu = 0;
								return 0;
							}
							if (opinv)
							{
								opcontmenu = 1;
								return 0;
							}
							if (pole1[plposx][plposy] == 4)
							{
								next_level();
								light--;
								next_hod();
								return 0;
							}
							if (pole1[plposx][plposy] == 1)
							{
								vyp = GRI(4)+1;
								/*if (vyp == 4)
									vyp = GRI(4)+1;*/
								items[plposx][plposy] = vyp;
								pole1[plposx][plposy] = 0;
								return 0;
							}
							if (pole1[plposx][plposy] == 2)
							{
								bgbtlst = bgbtlstmax;
								return 0;
							}
							if (items[plposx][plposy] != 0)
							{
								geteltoinv(items[plposx][plposy]);
								items[plposx][plposy] = 0;
								return 0;
							}
							return 0;
						}
//
//открытие инвентаря
		function invent()
		{
			if (opinv)
			{
				opinv = 0;
				var cord = document.getElementById("inf");
				cord.style.display = 'none';
				return 0;
			}
			srtinv();
			opinv = 1;
			var cord = document.getElementById("inf");
			cord.style.display = 'block';
			return 0;
		}
//Функция, что активируется каждый ход
			function next_hod()
			{
				light--;
				if (tryap > 0)
				{
					light--;
				}
				if (wat > 0)
					wat--;
				else
				{
					wat--;
					hp-=8;
				}
				if (fd > 0)
					fd--;
				else
				{
					fd--;
					hp-=5;
				}
				if (Math.round(fd/fdmax*100) > 70 && Math.round(wat/watmax*100) > 70 && hp < hpmax && perreg > 2)
				{
					hp++;
					perreg = 0;
					fd--;
					wat--;
				}
				else
					if ((Math.round(fd/fdmax*100) > 70 && Math.round(wat/watmax*100) > 70))
					{
						perreg++;
						fd--;
						wat--;
					}
				let inf = document.getElementById("inf");
				inf.innerHTML = "";
				for (let mbx = 0; mbx < maxwidth; mbx++)
					for (let mby = 0; mby < maxwidth; mby++)
					{
						if (mobs[mbx][mby][0] == 1 && mobs[mbx][mby][1] == 0)
						{
							var pth = find_path(mbx, mby, plposx, plposy);
							if (Math.sqrt((mbx - plposx)*(mbx - plposx)+(mby - plposy)*(mby - plposy)) < 3)
							{
								inf.style.display = "block";
								inf.innerHTML += "Жывёла ХХХ. Сіла 10. HP: " + mobs[mbx][mby][2] + ";<br>";
							}
							if (Math.sqrt((mbx - plposx)*(mbx - plposx)+(mby - plposy)*(mby - plposy)) < 1.8)
							{
								hp-=10;
							}
							else
							{
								if (Math.sqrt((mbx - plposx)*(mbx - plposx)+(mby - plposy)*(mby - plposy)) < 10)
								{
									mobs[pth[1][0]][pth[1][1]][0] = 1;
									mobs[pth[1][0]][pth[1][1]][2] = mobs[mbx][mby][2];
									mobs[mbx][mby][0] = 0;
									mobs[mbx][mby][2] = 0;
									mobs[pth[1][0]][pth[1][1]][1] = 1;
									if (pth[1][0] - mbx > 0)
										mobs[pth[1][0]][pth[1][1]][3] = 1;
									else
										mobs[pth[1][0]][pth[1][1]][3] = 0;
								}
							}
						}
					}
				for (let mbx = 0; mbx < maxwidth; mbx++)
					for (let mby = 0; mby < maxwidth; mby++)
						mobs[mbx][mby][1] = 0;
				if (inf.innerHTML == "")
					inf.style.display = "none";
			}
//Инвентарь добавление предмета
function geteltoinv(item)
{
	add = 0;
	for (let j = 0; j < 7; j++)
	{
		if (add)
			break;
		for (let i = 0; i < 7; i++)
			if (inv[i][j] == 0)
			{
				inv[i][j] = item;
				add++;
				break;
			}
	}
}
//Инвентарь сдвиг
	function srtinv()
	{
		for (let j = 0; j < 7; j++)
			for (let i = 0; i < 7; i++)
			{
				if (i == 5 && j == 6)
					break;
				if (inv[i][j] == 0)
				{
					if (i < 6)
					{
						inv[i][j] = inv[i+1][j];
						inv[i+1][j] = 0;
					}
					else
					{
						inv[i][j] = inv[0][j+1];
						inv[0][j+1] = 0;
					}
				}
				
			}
	}
//Инвентарь информация
		function invinf()
		{
			switch(inv[x_inv][y_inv])
			{
				case 0://noting
				{
					document.getElementById("inf").innerHTML = "Гэта пустая клетка";
					break;
				}
				case 1://bread
				{
					document.getElementById("inf").innerHTML = "Хлеб - асноўная ежа ў падзямеллі. Узнаўляе 75 адсоткаў ежы";
					break;
				}
				case 2://torch
				{
					document.getElementById("inf").innerHTML = "Факел - асноўнае асвятленне для вас ў падзямеллі. Свеціць " + lightmax+ " хадоў";
					break;
				}
				case 3://little_bottle
				{
					document.getElementById("inf").innerHTML = "Маленькая бутэлечка вады. Узнаўляе 70 адсоткаў вады";
					break;
				}
				case 4://tryapka
				{
					document.getElementById("inf").innerHTML = "Ануча, смазаная магніем. Павялічвае радыус святла ад факела да поўнага затухання альбо запальвання новага. Факел згарае хутчэй.";
					break;
				}
				case 10://big_bottle
				{
					document.getElementById("inf").innerHTML = "У вялікай бутэльцы можна захоўваць воду, набраную ў лужах і пасля яе піць. Зараз бутэлька запоўнена на " + Math.round(bgbtlst/bgbtlstmax*100) + " адсоткаў. Гэтага хопіць на " + Math.floor(bgbtlst/500) + " поўных узнаўленні вады.";
					break;
				}
				default:
				{
					inv[x_inv][y_inv] = 0;
					srtinv();
					break;
				}
			}
		}
//
//Управление основа
			pole.onkeydown = pole.onkeyup = pole.onkeypress = handle;
			function handle(e)//ход
			{
				if (!nazh)
				{
					nazh = 1;
					switch(e.code)
					{
						case "KeyW":
						{
							up();
							break;
						}
						case "KeyS":
						{
							down();
							break;
						}
						case "KeyA":
						{
							left();
							break;
						}
						case "KeyD":
						{
							right();
							break;
						}
						case "KeyE":
						{
							use();
							break;
						}
						case "KeyI":
						{
							invent();
							break;
						}
						case "ArrowUp":
						{
							up();
							break;
						}
						case "ArrowDown":
						{
							down();
							break;
						}
						case "ArrowLeft":
						{
							left();
							break;
						}
						case "ArrowRight":
						{
							right();
							break;
						}
						case "Enter":
						{
							use();
							break;
						}
						case "ControlRight":
						{
							invent();
							break;
						}
					}
				}
				draw();
			}
//
function unh()
{
	nazh = 0;
}
//Инвентарь использование предмета
function invchs()
{
	switch(inv[x_inv][y_inv])
	{
		case 0://noting
		{
			break;
		}
		case 1://bread
		{
			fd+=600;
			inv[x_inv][y_inv] = 0;
			if (fd > fdmax)
				fd = fdmax;
			break;
		}
		case 2://torch
		{
			light=lightmax;
			inv[x_inv][y_inv] = 0;
			tryap = 0;
			break;
		}
		case 3: //little_bottle
		{
			wat+=350;
			if (wat > watmax)
				wat = watmax;
			inv[x_inv][y_inv] = 0;
			break;
		}
		case 4: //tryapka
		{
			tryap = 1;
			inv[x_inv][y_inv] = 0;
			break;
		}
		case 10: //big_bootle
		{
			razn = watmax-wat;
			if (bgbtlst > razn)
			{
				wat = watmax;
				bgbtlst = bgbtlst - razn;
			}
			else
			{
				wat+=bgbtlst;
				bgbtlst = 0;
			}
			break;
		}
	}
	srtinv();
	srtinv();
}
//Статы
	function hpload()
	{
		var canvas = document.getElementById("hpbar");
		var ctx = canvas.getContext('2d');
		var grd=ctx.createLinearGradient(-100,250,900,250);
		grd.addColorStop(0,"#ff0000");
		grd.addColorStop(0.5,"#ffff00");
		grd.addColorStop(1,"#00ff00");
		ctx.beginPath();
		ctx.fillStyle = grd;
		ctx.rect(0, 0, hp*10, 500);
		ctx.fill();
	}
	function fdload()
	{
		var canvas = document.getElementById("fdbar");
		var ctx = canvas.getContext('2d');
		ctx.clearRect(0, 0, 1000, 500);
		ctx.beginPath();
		if (fd>0)
		{
			ctx.fillStyle = "#EC9D31";
			ctx.rect(0, 0, Math.round(fd/fdmax*1000), 500);
			ctx.fill();
		}
	}
	function wtload()
	{
		var canvas = document.getElementById("wtbar");
		var ctx = canvas.getContext('2d');
		ctx.clearRect(0, 0, 1000, 500);
		ctx.beginPath();
		if (fd>0)
		{
			ctx.fillStyle = "#229EEA";
			ctx.rect(0, 0, Math.round(wat/watmax*1000), 500);
			ctx.fill();
		}
	}
	function ltload()
	{
		var canvas = document.getElementById("ltbar");
		var ctx = canvas.getContext('2d');
		ctx.clearRect(0, 0, 1000, 500);
		ctx.beginPath();
		if (!tryap)
		{
			if (light>0)
			{
				ctx.fillStyle = "#D1D61B";
				ctx.rect(0, 0, Math.round(light/lightmax*800), 500);
				ctx.fill();
			}
			else
			{
				ctx.fillStyle = "black";
				ctx.rect(0, 0, -light*160, 500);
				ctx.fill();
			}
		}
		else
		{
			if (light>0)
			{
				ctx.fillStyle = "#E3A800";
				ctx.rect(0, 0, Math.round(light/lightmax*800), 500);
				ctx.fill();
			}
			else
			{
				light = 0;
				tryap = 0;
			}
		}
	}
//
//Большая бутылка
		function bigbottle(i, j)
		{
			var canvas = document.getElementById("pole");
			var ctx = canvas.getContext('2d');
			ctx.clearRect(i*1000, j*1000, 1000, 1000);
			ctx.fillStyle = "#229EEA";
			//(1000-Math.round(bgbtlst/bgbtlstmax*1000))
			ctx.beginPath();
			ctx.moveTo(i*1000+1000, j*1000+850);
			ctx.lineTo(i*1000, j*1000+850);
			ctx.lineTo(i*1000, j *1000 + 200 +(650-Math.round(bgbtlst/bgbtlstmax*650)));
			ctx.lineTo(i*1000+1000, j *1000 + 200 + (650-Math.round(bgbtlst/bgbtlstmax*650)));
			//ctx.rect(i*1000, j*1000+200 + (650-Math.round(bgbtlst/bgbtlstmax*650)), 1000, 1000-350);
			ctx.fill();
			ctx.drawImage(bgbtl,i*1000, j*1000, 1000, 1000);
		}
//Кратчайший путь
			function Queue()
			{
				let collection = [];
				this.put = function(element)
				{
					collection.push(element);
				}
				this.del = function()
				{
					return collection.shift();
				}

				this.get = function()
				{
					return collection[0];
				}

				this.empty = function()
				{
					return collection.length === 0;
				}

				this.size = function()
				{
					return collection.length;
				}
			}
			function find_path(xst, yst, xfin, yfin)
			{
				var frontier = new Queue();
				var tt = [];
				tt[0] = xst; tt[1] = yst;
				frontier.put(tt);
				var came_from = [];
				var map = [];
				for (let i = 0; i < maxwidth; i++)
				{
					came_from[i] = [];
					map[i] = [];
					for (let j = 0; j < maxheight; j++)
					{
						if (pole[i][j] < 0 || pole[i][j] == 1)
							map[i][j] = 0;
						if (pole[i][j] == 2 || pole[i][j] == 0)
							map[i][j] = 1;
						came_from[i][j] = [];
						came_from[i][j][0] = 0;
						came_from[i][j][1] = 0;
					}
				}
				while (!frontier.empty())
				{
					var current = frontier.get();
					frontier.del();
					if (map[current[0]+1][current[1]])
					{
						frontier.put([current[0]+1, current[1]]);
						came_from[current[0]+1][current[1]] = [current[0], current[1]];
						map[current[0]+1][current[1]] = 0;
					}
					if (map[current[0]-1][current[1]])
					{
						frontier.put([current[0]-1, current[1]]);
						came_from[current[0]-1][current[1]] = [current[0], current[1]];
						map[current[0]-1][current[1]] = 0;
					}
					if (map[current[0]][current[1]+1])
					{
						frontier.put([current[0], current[1]+1]);
						came_from[current[0]][current[1]+1] = [current[0], current[1]];
						map[current[0]][current[1]+1] = 0;
					}
					if (map[current[0]][current[1]-1])
					{
						frontier.put([current[0], current[1]-1]);
						came_from[current[0]][current[1]-1] = [current[0], current[1]];
						map[current[0]][current[1]-1] = 0;
					}
				}
				var current2 = [xfin, yfin];
				var path = [current2];
				var current21 = [];
				while (!(current2[0] == xst && current2[1] == yst))
				{
					current21 = came_from[current2[0]][current2[1]];
					path.push(current21);
					current2[0] = current21[0]; current2[1] = current21[1];
				}
				path.reverse();
				return path;
			}
//
//INFO
function info()
{
	let io = document.getElementById("infodiv");
	if (io.style.display == "block")
		io.style.display = "none";
	else
		io.style.display = "block";
}
//
//AUTHOR
function author()
{
	let io = document.getElementById("auth");
	if (io.style.display == "block")
		io.style.display = "none";
	else
		io.style.display = "block";
}
//